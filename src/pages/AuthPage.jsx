//–ø–æ–≤–Ω—ñ—Å—Ç—é —Ä–æ–±–æ—á–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è

import { useState, useEffect } from 'react';
import styles from './login-page.module.css';
import { useNavigate } from 'react-router-dom';
import { jwtDecode } from 'jwt-decode';

export default function AuthPage() {
  const [isLogin, setIsLogin] = useState(true);

  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const [errors, setErrors] = useState({});

  const navigate = useNavigate();

  useEffect(() => {
    setName('');
    setEmail('');
    setPassword('');
    setErrors({});
  }, [isLogin]);

  const validate = () => {
    const newErrors = {};

    const allowedEmailDomains = [
      'gmail.com',
      'outlook.com',
      'ukr.net',
      'icloud.com',
      'yahoo.com',
    ];

    if (!email.trim()) {
      newErrors.email = '–ü–æ–ª–µ "–ü–æ—à—Ç–∞" —î –æ–±–æ–≤ º—è–∑–∫–æ–≤–∏–º';
    } else {
      const regex = /^[a-zA-Z0-9._%+-]+@([a-zA-Z0-9.-]+\.[a-zA-Z]{2,})$/;
      const match = email.match(regex);

      if (!match || !allowedEmailDomains.includes(match[1].toLowerCase())) {
        newErrors.email = '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø–æ—à—Ç—É –∑ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ–≥–æ –¥–æ–º–µ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, gmail.com)';
      }
    }

    if (!password.trim()) {
      newErrors.password = '–ü–æ–ª–µ "–ü–∞—Ä–æ–ª—å" —î –æ–±–æ–≤ º—è–∑–∫–æ–≤–∏–º';
    } else if (password.length < 6) {
      newErrors.password = '–ü–∞—Ä–æ–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤';
    }

    if (!isLogin && !name.trim()) {
      newErrors.name = '–ü–æ–ª–µ "–Ü–º º—è" —î –æ–±–æ–≤ º—è–∑–∫–æ–≤–∏–º';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!validate()) return;

    if (isLogin) {
      // –õ–æ–≥—ñ–Ω
      const params = new URLSearchParams({
        email: email,
        password: password,
      });

      try {
        const response = await fetch(`http://localhost:8000/auth/login/email?${params.toString()}`, {
          method: "POST",
          headers: {
            "accept": "application/json",
          },
          credentials: "include",
          body: null,
        });

        const data = await response.json();

        if (!response.ok) {
          console.error("–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—ñ–Ω—É:", data);
          setErrors({ form: data.detail || "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—ñ–Ω—ñ" });
        } else {
          console.log("–£—Å–ø—ñ—à–Ω–∏–π –ª–æ–≥—ñ–Ω:", data);
          localStorage.setItem('id', data.id);
          localStorage.setItem("token", data.access_token);
          localStorage.setItem('user_email', data.email);

          // üß† –î–µ–∫–æ–¥—É—î–º–æ —Ç–æ–∫–µ–Ω —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ email
          const decoded = jwtDecode(data.access_token);
          const extractedEmail = decoded.sub || decoded.email;
          if (extractedEmail) {
            localStorage.setItem('user_email', extractedEmail);
          }
          //TEST
          window.location.href = "/";
        }
      } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—Ä–∏ –ª–æ–≥—ñ–Ω—ñ:", error);
        setErrors({ form: "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º" });
      }

    } else {
      // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
      const params = new URLSearchParams({
        username: name,
        email: email,
        password: password,
      });

      try {
        const response = await fetch(`http://localhost:8000/auth/registration?${params.toString()}`, {
          method: "POST",
          headers: {
            "accept": "application/json",
          },
          credentials: "include",
          body: null,
        });

        const data = await response.json();

        if (!response.ok) {
          console.error("–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", data);
          setErrors({ form: data.detail || "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó" });
        } else {
          console.log("–£—Å–ø—ñ—à–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è:", data);

          try {
            const verificationParams = new URLSearchParams({ email: email.trim() });

            const verificationRes = await fetch(
              `http://localhost:8000/auth/profile/email/get/verification-code?${verificationParams.toString()}`,
              {
                method: "POST",
                headers: {
                  "accept": "application/json",
                },
                credentials: "include",
                body: "",
              }
            );

            if (!verificationRes.ok) {
              const err = await verificationRes.json();
              console.error("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ª–∏—Å—Ç–∞:", err);
            } else {
              console.log("–õ–∏—Å—Ç –∑ –∫–æ–¥–æ–º –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!");
            }
          } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ—à—Ç–∏:", error);
          }

          window.location.href = "/";
        }
      } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", error);
        setErrors({ form: "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º" });
      }
    }
  };

  const toggleMode = () => setIsLogin(prev => !prev);

  return (
    <div className={styles['auth-container']}>
      <div className={styles['login-cntr']}>
        <div className={styles['login-page']}>
          <div className={`${styles.container} ${isLogin ? '' : styles['register-mode']}`}>
            <div className={styles['auth-left']}>
              {isLogin ? (
                <>
                  <h2>–í–•–Ü–î</h2>
                  <input
                    type="email"
                    placeholder="–ü–æ—à—Ç–∞"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                  />
                  {errors.email && <span className={styles['error-text']}>{errors.email}</span>}

                  <input
                    type="password"
                    placeholder="–ü–∞—Ä–æ–ª—å"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                  />
                  {errors.password && <span className={styles['error-text']}>{errors.password}</span>}

                  <a href="#">–ó–∞–±—É–ª–∏ –ø–∞—Ä–æ–ª—å?</a>
                  <button className={styles['primary-btn']} onClick={handleSubmit}>–£–≤—ñ–π—Ç–∏</button>
                </>
              ) : (
                <>
                  <h2>–†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø</h2>
                  <input
                    type="text"
                    placeholder="–Ü–º'—è"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                  />
                  {errors.name && <span className={styles['error-text']}>{errors.name}</span>}

                  <input
                    type="email"
                    placeholder="–ü–æ—à—Ç–∞"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                  />
                  {errors.email && <span className={styles['error-text']}>{errors.email}</span>}

                  <input
                    type="password"
                    placeholder="–ü–∞—Ä–æ–ª—å"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                  />
                  {errors.password && <span className={styles['error-text']}>{errors.password}</span>}

                  <button className={styles['primary-btn']} onClick={handleSubmit}>–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å</button>
                </>
              )}
            </div>

            <div className={styles['auth-right']}>
              {isLogin ? (
                <>
                  <h2>–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!</h2>
                  <p>–©–µ –Ω–µ –º–∞—î—à –∞–∫–∞—É–Ω—Ç—É?</p>
                  <button className={styles['primary-btn']} onClick={toggleMode}>
                    –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å
                  </button>
                </>
              ) : (
                <>
                  <h2>–†–∞–¥—ñ —Ç–µ–±–µ –±–∞—á–∏—Ç–∏!</h2>
                  <p>–í–∂–µ –º–∞—î—à –∞–∫–∞—É–Ω—Ç?</p>
                  <button className={styles['primary-btn']} onClick={toggleMode}>
                    –£–≤—ñ–π—Ç–∏
                  </button>
                </>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
